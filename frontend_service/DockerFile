# Stage 1: Build the React TypeScript application
FROM node:20-alpine AS build

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies with standard install (more flexible than ci)
RUN npm install

# Copy the rest of the application code
COPY . .

# Make sure TypeScript is available 
RUN npm list typescript || npm install -D typescript

# Build the application with more verbose output
RUN npm run build || (echo "Build failed. Logs:" && cat npm-debug.log || true)

# Stage 2: Create a lightweight production image
FROM nginx:alpine

# Copy the build output to replace the default nginx contents
COPY --from=build /app/dist /usr/share/nginx/html

# Copy custom nginx configuration if needed
# COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port 5173 (as defined in your docker-compose.yml)
EXPOSE 5173

# Configure nginx to work with React Router
RUN echo 'server { \
    listen 5173; \
    location / { \
        root /usr/share/nginx/html; \
        index index.html index.htm; \
        try_files $uri $uri/ /index.html; \
    } \
}' > /etc/nginx/conf.d/default.conf

# Start nginx in the foreground
CMD ["nginx", "-g", "daemon off;"]
