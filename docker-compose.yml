services:
    mysql:
        image: mysql:8.0
        container_name: mysql
        restart: unless-stopped
        ports:
            - "3306:3306"
        environment:
            MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
        volumes:
            - mysql_data:/var/lib/mysql
            - ./mysql-init-scripts:/docker-entrypoint-initdb.d # Custom initialisation scripts
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - app_network

    rabbitmq:
        image: rabbitmq:3-management
        container_name: rabbitmq
        restart: unless-stopped
        ports:
            - "5672:5672"
            - "15672:15672"
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "ping"]
            interval: 20s
            timeout: 10s
            retries: 5
        deploy:
            resources:
                limits:
                    memory: 1g
                    cpus: "0.5"
        networks:
            - app_network

    minio:
        image: quay.io/minio/minio
        container_name: minio
        restart: unless-stopped
        ports:
            - "9000:9000"
            - "9001:9001"
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        command: server /data --console-address ":9001"
        volumes:
            - minio_data:/data
        healthcheck:
            test:
                ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
            interval: 30s
            timeout: 20s
            retries: 3
        networks:
            - app_network
    api_gateway:
        build:
            context: ./api_gateway
            dockerfile: Dockerfile
        container_name: api-gateway
        ports:
            - "8000:8000"
        networks:
            - app_network
        depends_on:
            - discovery_server
            - user_service
            - blog_service
            - comment_service
            - notification_service

    discovery_server:
        build:
            context: ./discovery_server
            dockerfile: Dockerfile
        container_name: discovery-server
        ports:
            - "8761:8761"
        networks:
            - app_network

    blog_service:
        build:
            context: .
            dockerfile: blog_service/Dockerfile
        container_name: blog-service
        # ports:
        #     - "8080:8080"
        depends_on:
            mysql:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        environment:
            DB_USERNAME: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}
            RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
            RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        networks:
            - app_network

    comment_service:
        build:
            context: ./comment_service
            dockerfile: Dockerfile
        container_name: comment-service
        # ports:
        #     - "8081:8081"
        depends_on:
            mysql:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        environment:
            DB_USERNAME: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}
            RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
            RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
        networks:
            - app_network

    notification_service:
        build:
            context: .
            dockerfile: notification_service/Dockerfile
        container_name: notification-service
        # ports:
        #     - "8082:8082"
        depends_on:
            mysql:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        environment:
            DB_USERNAME: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}
            RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
            RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
            MAIL_USERNAME: ${MAIL_USERNAME}
            MAIL_PASSWORD: ${MAIL_PASSWORD}
        networks:
            - app_network

    user_service:
        build:
            context: ./user_service
            dockerfile: Dockerfile
        container_name: user-service
        # ports:
        #     - "8083:8083"
        depends_on:
            mysql:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        environment:
            DB_USERNAME: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}
            RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
            RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
        networks:
            - app_network

    frontend_service:
        build:
            context: ./frontend_service
            dockerfile: Dockerfile
        container_name: frontend-service
        ports:
            - "5173:5173"
        networks:
            - app_network

volumes:
    mysql_data:
    rabbitmq_data:
    minio_data:

networks:
    app_network:
        driver: bridge
